{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objFile","objLink","stlFile","stlLink","_state","window","location","href","_this2","react_default","a","createElement","className","src","process","alt","id","htmlFor","type","name","onChange","e","console","log","target","files","setState","placeholder","build","onSceneRendered","element","sceneClassName","file","modelColor","defaultValue","value","onClick","url","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9815da22.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {OBJViewer, STLViewer} from 'react-stl-obj-viewer';\nimport './App.css'\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            objFile: null,\n            objLink: null,\n            stlFile: null,\n            stlLink: null,\n        };\n        this._state = {\n            objLink: window.location.href + 'bb8.obj',\n            stlLink: window.location.href + 'bottle.stl',\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"info\">\n                    <a href=\"https://github.com/bohdanbirdie/react-stl-obj-viewer\">\n                        Package <img src={process.env.PUBLIC_URL + \"/gh.png\"} alt=\"Github\" className=\"gh-icon\"/>\n                    </a>\n                    <br/>\n                    <a href=\"https://github.com/bohdanbirdie/stl-obj-demo\">\n                        Example <img src={process.env.PUBLIC_URL + \"/source.png\"} alt=\"Github\" className=\"gh-icon\"/>\n                    </a>\n                </div>\n                <div className=\"container\" id=\"div1\">\n                    <label htmlFor=\"obj-file\">\n                        Load OBJ by file\n                        <br/>\n                        <input type=\"file\"\n                               name=\"obj-file\"\n                               onChange={(e) => {\n                                   console.log(e.target.files)\n                                   this.setState({\n                                       objFile: e.target.files[0]\n                                   })\n                               }} placeholder=\"test\"/>\n                    </label>\n\n                    {this.state.objFile ?\n                        <OBJViewer\n                            onSceneRendered={(element) => {\n                                console.log(element)\n                            }}\n                            sceneClassName=\"test-scene\"\n                            file={this.state.objFile}\n                            className=\"obj\"\n                            modelColor=\"#FF0000\"/> : null\n                    }\n                </div>\n                <div className=\"container\" id=\"div2\">\n                    <label htmlFor=\"obj-file\">\n                        Load STL by file\n                        <br/>\n                        <input type=\"file\"\n                               name=\"obj-file\"\n                               onChange={(e) => {\n                                   console.log(e.target.files)\n                                   this.setState({\n                                       stlFile: e.target.files[0]\n                                   })\n                               }} placeholder=\"test\"/>\n                    </label>\n                    {this.state.stlFile ?\n                        <STLViewer\n                            onSceneRendered={(element) => {\n                                console.log(element)\n                            }}\n                            sceneClassName=\"test-scene\"\n                            file={this.state.stlFile}\n                            className=\"obj\"\n                            modelColor=\"#FF0000\"/> : null\n\n                    }\n                </div>\n                <div className=\"container\" id=\"div3\">\n                    <label htmlFor=\"obj-link\">\n                        Load OBJ by link\n                        <br/>\n                        <input type=\"text\"\n                               name=\"obj-link\"\n                               defaultValue={this._state.objLink}\n                               onChange={(e) => {\n                                   this._state.objLink = e.target.value;\n                               }}/>\n                        <input type=\"button\" value=\"upload URL\" onClick={() => {\n                            this.setState({\n                                objLink: this._state.objLink,\n                            })\n                        }}/>\n                    </label>\n                    {this.state.objLink ?\n                        <OBJViewer\n                            onSceneRendered={(element) => {\n                                console.log(element)\n                            }}\n                            sceneClassName=\"test-scene\"\n                            url={this.state.objLink}\n                            className=\"obj\"\n                            modelColor=\"#FF0000\"/> : null\n                    }\n                </div>\n                <div className=\"container\" id=\"div4\">\n                    <label htmlFor=\"obj-link\">\n                        Load STL by link\n                        <br/>\n                        <input type=\"text\"\n                               name=\"obj-link\"\n                               defaultValue={this._state.stlLink}\n                               onChange={(e) => {\n                                   this._state.stlLink = e.target.value;\n                               }}/>\n                        <input type=\"button\" value=\"upload URL\" onClick={() => {\n                            this.setState({\n                                stlLink: this._state.stlLink,\n                            })\n                        }}/>\n                    </label>\n                    {this.state.stlLink ?\n                        <STLViewer\n                            onSceneRendered={(element) => {\n                                console.log(element)\n                            }}\n                            sceneClassName=\"test-scene\"\n                            url={this.state.stlLink}\n                            className=\"obj\"\n                            modelColor=\"#FF0000\"/> : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}